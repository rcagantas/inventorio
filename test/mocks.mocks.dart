// Mocks generated by Mockito 5.1.0 from annotations
// in inventorio/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i6;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i7;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i8;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i10;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i12;
import 'package:flutter_local_notifications/src/types.dart' as _i13;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i11;
import 'package:uuid/uuid.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUuidValue_0 extends _i1.Fake implements _i2.UuidValue {}

class _FakeFile_1 extends _i1.Fake implements _i3.File {}

class _FakeUri_2 extends _i1.Fake implements Uri {}

class _FakeDirectory_3 extends _i1.Fake implements _i3.Directory {}

class _FakeDateTime_4 extends _i1.Fake implements DateTime {}

class _FakeRandomAccessFile_5 extends _i1.Fake implements _i3.RandomAccessFile {
}

class _FakeIOSink_6 extends _i1.Fake implements _i3.IOSink {}

class _FakeFileStat_7 extends _i1.Fake implements _i3.FileStat {}

class _FakeFileSystemEntity_8 extends _i1.Fake implements _i3.FileSystemEntity {
}

/// A class which mocks [Uuid].
///
/// See the documentation for Mockito's code generation for more information.
class MockUuid extends _i1.Mock implements _i2.Uuid {
  MockUuid() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String v1({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v1, [], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v1buffer(List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #v1buffer, [buffer], {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i2.UuidValue v1obj({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v1obj, [], {#options: options}),
          returnValue: _FakeUuidValue_0()) as _i2.UuidValue);
  @override
  String v4({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v4, [], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v4buffer(List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #v4buffer, [buffer], {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i2.UuidValue v4obj({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v4obj, [], {#options: options}),
          returnValue: _FakeUuidValue_0()) as _i2.UuidValue);
  @override
  String v5(String? namespace, String? name, {Map<String, dynamic>? options}) =>
      (super.noSuchMethod(
          Invocation.method(#v5, [namespace, name], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v5buffer(String? namespace, String? name, List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#v5buffer, [namespace, name, buffer],
              {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i2.UuidValue v5obj(String? namespace, String? name,
          {Map<String, dynamic>? options}) =>
      (super.noSuchMethod(
          Invocation.method(#v5obj, [namespace, name], {#options: options}),
          returnValue: _FakeUuidValue_0()) as _i2.UuidValue);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i3.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.File get absolute => (super.noSuchMethod(Invocation.getter(#absolute),
      returnValue: _FakeFile_1()) as _i3.File);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_2())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i3.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_3()) as _i3.Directory);
  @override
  _i4.Future<_i3.File> create({bool? recursive = false}) => (super.noSuchMethod(
          Invocation.method(#create, [], {#recursive: recursive}),
          returnValue: Future<_i3.File>.value(_FakeFile_1()))
      as _i4.Future<_i3.File>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i4.Future<_i3.File> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i3.File>.value(_FakeFile_1()))
          as _i4.Future<_i3.File>);
  @override
  _i3.File renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFile_1()) as _i3.File);
  @override
  _i4.Future<_i3.File> copy(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copy, [newPath]),
              returnValue: Future<_i3.File>.value(_FakeFile_1()))
          as _i4.Future<_i3.File>);
  @override
  _i3.File copySync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#copySync, [newPath]),
          returnValue: _FakeFile_1()) as _i3.File);
  @override
  _i4.Future<int> length() =>
      (super.noSuchMethod(Invocation.method(#length, []),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);
  @override
  _i4.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(Invocation.method(#lastAccessed, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_4()))
          as _i4.Future<DateTime>);
  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(Invocation.method(#lastAccessedSync, []),
          returnValue: _FakeDateTime_4()) as DateTime);
  @override
  _i4.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastAccessed, [time]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastAccessedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<DateTime> lastModified() =>
      (super.noSuchMethod(Invocation.method(#lastModified, []),
              returnValue: Future<DateTime>.value(_FakeDateTime_4()))
          as _i4.Future<DateTime>);
  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(Invocation.method(#lastModifiedSync, []),
          returnValue: _FakeDateTime_4()) as DateTime);
  @override
  _i4.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(Invocation.method(#setLastModified, [time]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) =>
      super.noSuchMethod(Invocation.method(#setLastModifiedSync, [time]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i3.RandomAccessFile> open(
          {_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#open, [], {#mode: mode}),
              returnValue:
                  Future<_i3.RandomAccessFile>.value(_FakeRandomAccessFile_5()))
          as _i4.Future<_i3.RandomAccessFile>);
  @override
  _i3.RandomAccessFile openSync({_i3.FileMode? mode = _i3.FileMode.read}) =>
      (super.noSuchMethod(Invocation.method(#openSync, [], {#mode: mode}),
          returnValue: _FakeRandomAccessFile_5()) as _i3.RandomAccessFile);
  @override
  _i4.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(Invocation.method(#openRead, [start, end]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i3.IOSink openWrite(
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#openWrite, [], {#mode: mode, #encoding: encoding}),
          returnValue: _FakeIOSink_6()) as _i3.IOSink);
  @override
  _i4.Future<_i6.Uint8List> readAsBytes() =>
      (super.noSuchMethod(Invocation.method(#readAsBytes, []),
              returnValue: Future<_i6.Uint8List>.value(_i6.Uint8List(0)))
          as _i4.Future<_i6.Uint8List>);
  @override
  _i6.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(Invocation.method(#readAsBytesSync, []),
          returnValue: _i6.Uint8List(0)) as _i6.Uint8List);
  @override
  _i4.Future<String> readAsString(
          {_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsString, [], {#encoding: encoding}),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  String readAsStringSync({_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
          returnValue: '') as String);
  @override
  _i4.Future<List<String>> readAsLines(
          {_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
              Invocation.method(#readAsLines, [], {#encoding: encoding}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i4.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i5.Encoding? encoding = const _i5.Utf8Codec()}) =>
      (super.noSuchMethod(
          Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
          returnValue: <String>[]) as List<String>);
  @override
  _i4.Future<_i3.File> writeAsBytes(List<int>? bytes,
          {_i3.FileMode? mode = _i3.FileMode.write, bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeAsBytes, [bytes], {#mode: mode, #flush: flush}),
              returnValue: Future<_i3.File>.value(_FakeFile_1()))
          as _i4.Future<_i3.File>);
  @override
  void writeAsBytesSync(List<int>? bytes,
          {_i3.FileMode? mode = _i3.FileMode.write, bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i3.File> writeAsString(String? contents,
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i5.Encoding? encoding = const _i5.Utf8Codec(),
          bool? flush = false}) =>
      (super.noSuchMethod(
              Invocation.method(#writeAsString, [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush}),
              returnValue: Future<_i3.File>.value(_FakeFile_1()))
          as _i4.Future<_i3.File>);
  @override
  void writeAsStringSync(String? contents,
          {_i3.FileMode? mode = _i3.FileMode.write,
          _i5.Encoding? encoding = const _i5.Utf8Codec(),
          bool? flush = false}) =>
      super.noSuchMethod(
          Invocation.method(#writeAsStringSync, [contents],
              {#mode: mode, #encoding: encoding, #flush: flush}),
          returnValueForMissingStub: null);
  @override
  _i4.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i4.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i4.Future<_i3.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i3.FileStat>.value(_FakeFileStat_7()))
          as _i4.Future<_i3.FileStat>);
  @override
  _i3.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_7()) as _i3.FileStat);
  @override
  _i4.Future<_i3.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue:
                  Future<_i3.FileSystemEntity>.value(_FakeFileSystemEntity_8()))
      as _i4.Future<_i3.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i4.Stream<_i3.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i3.FileSystemEvent>.empty())
          as _i4.Stream<_i3.FileSystemEvent>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i7.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool?> initialize(
          _i8.InitializationSettings? initializationSettings,
          {_i9.SelectNotificationCallback? onSelectNotification}) =>
      (super.noSuchMethod(
          Invocation.method(#initialize, [initializationSettings],
              {#onSelectNotification: onSelectNotification}),
          returnValue: Future<bool?>.value()) as _i4.Future<bool?>);
  @override
  _i4.Future<_i9.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
              Invocation.method(#getNotificationAppLaunchDetails, []),
              returnValue: Future<_i9.NotificationAppLaunchDetails?>.value())
          as _i4.Future<_i9.NotificationAppLaunchDetails?>);
  @override
  _i4.Future<void> show(int? id, String? title, String? body,
          _i10.NotificationDetails? notificationDetails, {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(#show, [id, title, body, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(Invocation.method(#cancel, [id], {#tag: tag}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> cancelAll() =>
      (super.noSuchMethod(Invocation.method(#cancelAll, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> schedule(
          int? id,
          String? title,
          String? body,
          DateTime? scheduledDate,
          _i10.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#schedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> zonedSchedule(
          int? id,
          String? title,
          String? body,
          _i11.TZDateTime? scheduledDate,
          _i10.NotificationDetails? notificationDetails,
          {_i12.UILocalNotificationDateInterpretation?
              uiLocalNotificationDateInterpretation,
          bool? androidAllowWhileIdle,
          String? payload,
          _i13.DateTimeComponents? matchDateTimeComponents}) =>
      (super.noSuchMethod(
          Invocation.method(#zonedSchedule, [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails
          ], {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> periodicallyShow(
          int? id,
          String? title,
          String? body,
          _i9.RepeatInterval? repeatInterval,
          _i10.NotificationDetails? notificationDetails,
          {String? payload,
          bool? androidAllowWhileIdle = false}) =>
      (super.noSuchMethod(
          Invocation.method(#periodicallyShow, [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails
          ], {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> showDailyAtTime(
          int? id,
          String? title,
          String? body,
          _i13.Time? notificationTime,
          _i10.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showDailyAtTime,
              [id, title, body, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> showWeeklyAtDayAndTime(
          int? id,
          String? title,
          String? body,
          _i13.Day? day,
          _i13.Time? notificationTime,
          _i10.NotificationDetails? notificationDetails,
          {String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #showWeeklyAtDayAndTime,
              [id, title, body, day, notificationTime, notificationDetails],
              {#payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i9.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
              Invocation.method(#pendingNotificationRequests, []),
              returnValue: Future<List<_i9.PendingNotificationRequest>>.value(
                  <_i9.PendingNotificationRequest>[]))
          as _i4.Future<List<_i9.PendingNotificationRequest>>);
}
